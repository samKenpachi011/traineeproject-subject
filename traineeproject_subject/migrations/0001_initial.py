# Generated by Django 3.1.4 on 2022-01-14 08:57

import _socket
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_revision.revision_field
import edc_base.model_fields.custom_fields
import edc_base.model_fields.date_estimated
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.sites.managers
import edc_base.utils
import edc_consent.validators
import edc_protocol.validators
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('edc_appointment', '0016_auto_20220110_1052'),
        ('sites', '0002_alter_domain_unique'),
        ('edc_lab', '0016_auto_20220114_0750'),
    ]

    operations = [
        migrations.CreateModel(
            name='CommunityEngagementQuestionnaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_datetime', models.DateTimeField(help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('activity_status', models.CharField(choices=[('very active', 'Very active'), ('somewhat active', 'Somewhat active'), ('not active at all', 'Not active at all'), ('dont_want_to_answer', "Don't want to answer")], default='N/A', help_text='Activities such as burial society, Motshelo, Syndicate,PTA, VDC(Village Development Committee), Mophato and development of the community', max_length=20, verbose_name='How active are you in community activities?')),
                ('previous_election_participation', models.CharField(choices=[('yes', 'Yes'), ('no', 'No'), ('not applicable', 'No elections, cant vote'), ('dont_want_to_answer', "Don't want to answer")], default='N/A', help_text='Previous elections participation', max_length=20, verbose_name='Did you vote in the last local government election?')),
                ('neighbourhood_major_problems', models.CharField(choices=[('hiv and aids', 'HIV/AIDS'), ('schools', 'Schools'), ('sewer', 'Sewer'), ('unemployment', 'Unemployment'), ('roads', 'Roads'), ('water', 'Water'), ('other', 'Other, specify'), ('house', 'House'), ('malaria', 'Malaria')], default='N/A', help_text='Problems in the neighbourhood', max_length=16, verbose_name='What are the major problems in this neighbourhood?')),
                ('adult_participation', models.CharField(choices=[('yes', 'Yes'), ('no', 'No'), ('dont_know', "Don't know"), ('dont_want_to_answer', "Don't want to answer")], default='N/A', help_text='Do the adults work together in solving problems', max_length=20, verbose_name='If there is a problem in this neighborhood, do the adults work together in solving it?')),
            ],
            options={
                'verbose_name': 'Community Engagement Questionnaire',
                'verbose_name_plural': 'Community Engagement Questionnaire',
            },
        ),
        migrations.CreateModel(
            name='EducationQuestionnaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employment_status', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=6, verbose_name='Are you currently working?')),
                ('type_of_work', models.CharField(choices=[('occasional_or_casual_employment', 'Occasional or casual employment'), ('seasonal_employment', 'Seasonal Employment'), ('formal_wage_employment_full_time', 'Formal wage employment (full-time)'), ('formal_wage_employment_part_time', 'Formal wage employment (part-time)'), ('self_employed_in_agriculture', 'Self employed in agriculture'), ('self_employed_making_money_full_time', 'Self-employed making money (full time)'), ('self_employed_making_money_part_time', 'Self-employed making money (part time)'), ('dont_want_to_answer', "Don't want to answer"), ('OTHER', 'Other')], max_length=36, verbose_name='In your main job what type of work do you do?')),
                ('other_work', models.CharField(max_length=100, null=True, verbose_name='What is your other work type?')),
                ('previous_work_decscription', models.CharField(choices=[('farmer', 'Farmer (own land)'), ('farm_worker', 'Farm work on employers land'), ('domestic_worker', 'Domestic worker'), ('bar_hotel_guesthouse_venue_worker', 'Work in bar/ hotel/ guest house/ entertainment venue'), ('entertainer', 'Entertainer'), ('fishing', 'Fishing'), ('mining', 'Mining'), ('tourism_game_parks', 'Tourism / game parks'), ('shop_small_business_worker', 'Working in shop or small business'), ('informal_selling', 'Informal Selling'), ('commercial_sex_work', 'Commercial sex work'), ('truck_taxi_driver', 'Transport (trucker/ taxi driver)'), ('factory_worker', 'Factory worker'), ('guard', 'Guard  (security company)'), ('police_soldier', 'Police/ Soldier'), ('clerical_and_office_work', 'Clerical and office work'), ('government_worker', 'Government worker'), ('teacher', 'Teacher'), ('health_care_worker', 'Health care worker'), ('other_professional', 'Other professional'), ('dont_want_to_answer', "Don't want to answer"), ('OTHER', 'OTHER')], help_text='In the past month, how much money did you earn from workyou did or received in payment?', max_length=36, verbose_name='Describe the work that you do or did in your most recent job.')),
                ('previous_month_salary', models.CharField(choices=[('none', 'NONE'), ('1_199', 'BWP 1 - 199'), ('200_499', 'BWP 200 - 499'), ('500_999', 'BWP 500 - 999'), ('1000_4999', 'BWP 1000 - 4999'), ('5000_10000', 'BWP 5000 - 10000'), ('more_than_10000', 'More than BWP 10000'), ('dont_want_to_answer', "Don't want to answer")], max_length=36, verbose_name='In the past month, how much money did you earn from workyou did or received in payment?')),
            ],
            options={
                'verbose_name': 'Education Questionnaire',
                'verbose_name_plural': 'Education Questionnaire',
            },
        ),
        migrations.CreateModel(
            name='SubjectVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason_unscheduled_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for unscheduled visit, specify')),
                ('reason_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for missed visit, specify')),
                ('study_status', models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('reason', models.CharField(choices=[('scheduled', 'Scheduled visit/contact'), ('missed', 'Did not attend scheduled visit'), ('unscheduled', 'Unscheduled visit/contact'), ('lost', 'Use only when withdrawing subject off study'), ('completed protocol', 'Subject has completed the study')], max_length=25, verbose_name='What is the reason for this visit report?')),
                ('reason_missed', models.CharField(blank=True, max_length=250, null=True, verbose_name="If 'Did not attend scheduled visit' is detailed above, reason visit was not attended.")),
                ('reason_unscheduled', models.CharField(blank=True, max_length=25, null=True, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('info_source', models.CharField(choices=[('clinic_visit_w_subject', 'Clinic visit with participant'), ('other_contact_w_subject', 'Other contact with participant (i.e telephone call)'), ('contact_w_health_worker', 'Contact with health care worker'), ('Contact_w_family_design', 'Contact with family or designated person who can provide information'), ('OTHER', 'Other,specify')], max_length=40, verbose_name='What is the main source of this information?')),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edc_appointment.appointment')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Subject Visit',
                'ordering': ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence', 'report_datetime'),
                'abstract': False,
                'unique_together': {('subject_identifier', 'visit_schedule_name', 'schedule_name', 'report_datetime'), ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence')},
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='ScreeningEligibility',
            fields=[
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('screening_identifier', models.CharField(blank=True, editable=False, max_length=36, unique=True, verbose_name='Screening Eligibility Identifier')),
                ('age_in_years', models.PositiveIntegerField(help_text='Age in years.', verbose_name='Age')),
                ('is_guardian_present', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='Is guardian available')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('OTHER', 'Other')], help_text='Participant Gender', max_length=6, null=True, verbose_name='Gender')),
                ('nationality', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=3, verbose_name='Is the participant a citizen of Botswana')),
                ('married_to_citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='Is the participant married to a citizen of Botswana')),
                ('proof_of_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='Has the participant provided proof of marriage')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant literate')),
                ('is_literate_witness_present', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('is_eligible', models.BooleanField(default=False, editable=False)),
                ('reason_for_ineligibility', models.TextField(editable=False, max_length=150, null=True, verbose_name='Reason for ineligibility')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Screening Eligibility',
                'verbose_name_plural': 'Screening Eligibility',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason_unscheduled_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for unscheduled visit, specify')),
                ('reason_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for missed visit, specify')),
                ('study_status', models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('reason', models.CharField(choices=[('scheduled', 'Scheduled visit/contact'), ('missed', 'Did not attend scheduled visit'), ('unscheduled', 'Unscheduled visit/contact'), ('lost', 'Use only when withdrawing subject off study'), ('completed protocol', 'Subject has completed the study')], max_length=25, verbose_name='What is the reason for this visit report?')),
                ('reason_missed', models.CharField(blank=True, max_length=250, null=True, verbose_name="If 'Did not attend scheduled visit' is detailed above, reason visit was not attended.")),
                ('reason_unscheduled', models.CharField(blank=True, max_length=25, null=True, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('info_source', models.CharField(choices=[('clinic_visit_w_subject', 'Clinic visit with participant'), ('other_contact_w_subject', 'Other contact with participant (i.e telephone call)'), ('contact_w_health_worker', 'Contact with health care worker'), ('Contact_w_family_design', 'Contact with family or designated person who can provide information'), ('OTHER', 'Other,specify')], max_length=40, verbose_name='What is the main source of this information?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('appointment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edc_appointment.appointment')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Subject Visit',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectRequisition',
            fields=[
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('requisition_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Requisition Id')),
                ('identifier_prefix', models.CharField(db_index=True, editable=False, max_length=50, null=True)),
                ('primary_aliquot_identifier', models.CharField(db_index=True, editable=False, max_length=18, null=True)),
                ('clinic_verified', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, null=True)),
                ('clinic_verified_datetime', models.DateTimeField(null=True)),
                ('is_drawn', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No, provide a reason below', max_length=3, verbose_name='Was a specimen drawn?')),
                ('reason_not_drawn_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('protocol_number', models.CharField(editable=False, max_length=10, null=True)),
                ('clinician_initials', edc_base.model_fields.custom_fields.InitialsField(blank=True, help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, null=True, verbose_name='Initials')),
                ('specimen_type', models.CharField(blank=True, max_length=25, null=True, verbose_name='Specimen type')),
                ('received', models.BooleanField(default=False)),
                ('received_datetime', models.DateTimeField(blank=True, null=True)),
                ('processed', models.BooleanField(default=False)),
                ('processed_datetime', models.DateTimeField(blank=True, null=True)),
                ('packed', models.BooleanField(default=False)),
                ('packed_datetime', models.DateTimeField(blank=True, null=True)),
                ('shipped', models.BooleanField(default=False)),
                ('shipped_datetime', models.DateTimeField(blank=True, null=True)),
                ('requisition_datetime', models.DateTimeField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Requisition Date and Time')),
                ('reason_not_drawn', models.CharField(choices=[('not_collected', 'Not collected'), ('not_required', 'Not required at this visit'), ('measurement_skipped', 'Measurement skipped at this visit'), ('subject_refused', 'Subject refused'), ('equipment_malfunction', 'Equipment malfunction'), ('staff_unavailable', 'Staff unavailable'), ('no_further_information', 'No further information'), ('OTHER', 'Other, specify'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If not drawn, please explain')),
                ('drawn_datetime', models.DateTimeField(blank=True, help_text='If not drawn, leave blank.', null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date / Time Specimen Drawn')),
                ('study_site', models.CharField(choices=[('greater_francistown', 'Greater Francistown'), ('greater_gaborone', 'Greater Gaborone'), ('ngami', 'Ngami'), ('greater_selibe_phikwe', 'Greater Selibe Phikwe'), ('serowe_or_palapye', 'Serowe/Palapye')], max_length=25, verbose_name='Study site')),
                ('item_type', models.CharField(choices=[('N/A', 'Not applicable'), ('tube', 'Tube'), ('swab', 'Swab'), ('OTHER', 'Other')], default='N/A', max_length=25, verbose_name='Item collection type')),
                ('item_count', models.PositiveIntegerField(blank=True, help_text='Number of tubes, samples, etc being sent for this test/order only. Determines number of labels to print', null=True, verbose_name='Total number of items')),
                ('estimated_volume', models.DecimalField(blank=True, decimal_places=2, help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1', max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0, message='Cannot be a negative number')], verbose_name='Estimated volume in mL')),
                ('priority', models.CharField(choices=[('normal', 'Normal'), ('urgent', 'Urgent')], default='normal', max_length=25, verbose_name='Priority')),
                ('urgent_specify', models.TextField(blank=True, max_length=250, null=True, verbose_name='If urgent, please specify')),
                ('comments', models.TextField(blank=True, max_length=350, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('panel', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edc_lab.panel')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='traineeproject_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Subject Requisition',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectConsent',
            fields=[
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(editable=False, null=True)),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('updates_versions', models.BooleanField(default=False)),
                ('sid', models.CharField(blank=True, editable=False, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('screening_identifier', models.CharField(max_length=50, verbose_name='Screening identifier')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('consent_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of consent.', verbose_name='Consent date and time')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('language', models.CharField(blank=True, choices=[('setswana', 'Setswana'), ('english', 'English')], help_text='The language used for the consent process will also be used during data collection.', max_length=50, null=True, verbose_name='Language of consent')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant literate?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is illiterate.<br>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's last and first name")),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('OTHER', 'Other')], help_text='Participant Gender', max_length=6, null=True, verbose_name='Gender')),
                ('other_gender', models.CharField(max_length=100, null=True, verbose_name='If other specify...')),
                ('date_of_birth', models.DateField(null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.date_estimated.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('marital_status', models.CharField(choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], default='---------', max_length=8, verbose_name='What is your marital status?')),
                ('partner_count', models.PositiveIntegerField(verbose_name='Who do you currently live with?')),
                ('currently_living_with', models.CharField(choices=[('alone', 'Alone'), ('partner_or_spouse', 'Partner or spouse'), ('siblings', 'Siblings'), ('other', 'Other'), ('dont_want_to_answer', "Don't want to answer")], default='---------', max_length=20)),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Identity number')),
                ('identity_type', models.CharField(choices=[('country_id', 'Country ID number'), ('passport', 'Passport'), ('birth_certificate', 'Birth Certificate'), ('OTHER', 'Other')], default='---------', max_length=20, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number (Encryption: RSA local)', max_length=71, null=True)),
                ('consent_to_participate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', help_text='Participant is not eligible if no', max_length=3, validators=[edc_consent.validators.eligible_if_yes], verbose_name='Do you consent to participate in the study?')),
                ('consent_to_optional_sample_collection', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Do you consent to optional sample collection?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Subject Consent',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalScreeningEligibility',
            fields=[
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('screening_identifier', models.CharField(blank=True, db_index=True, editable=False, max_length=36, verbose_name='Screening Eligibility Identifier')),
                ('age_in_years', models.PositiveIntegerField(help_text='Age in years.', verbose_name='Age')),
                ('is_guardian_present', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='Is guardian available')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('OTHER', 'Other')], help_text='Participant Gender', max_length=6, null=True, verbose_name='Gender')),
                ('nationality', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=3, verbose_name='Is the participant a citizen of Botswana')),
                ('married_to_citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='Is the participant married to a citizen of Botswana')),
                ('proof_of_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='Has the participant provided proof of marriage')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant literate')),
                ('is_literate_witness_present', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('is_eligible', models.BooleanField(default=False, editable=False)),
                ('reason_for_ineligibility', models.TextField(editable=False, max_length=150, null=True, verbose_name='Reason for ineligibility')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Screening Eligibility',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='SubjectRequisition',
            fields=[
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('requisition_identifier', models.CharField(max_length=50, unique=True, verbose_name='Requisition Id')),
                ('identifier_prefix', models.CharField(editable=False, max_length=50, null=True, unique=True)),
                ('primary_aliquot_identifier', models.CharField(editable=False, max_length=18, null=True, unique=True)),
                ('clinic_verified', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, null=True)),
                ('clinic_verified_datetime', models.DateTimeField(null=True)),
                ('is_drawn', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No, provide a reason below', max_length=3, verbose_name='Was a specimen drawn?')),
                ('reason_not_drawn_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('protocol_number', models.CharField(editable=False, max_length=10, null=True)),
                ('clinician_initials', edc_base.model_fields.custom_fields.InitialsField(blank=True, help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, null=True, verbose_name='Initials')),
                ('specimen_type', models.CharField(blank=True, max_length=25, null=True, verbose_name='Specimen type')),
                ('received', models.BooleanField(default=False)),
                ('received_datetime', models.DateTimeField(blank=True, null=True)),
                ('processed', models.BooleanField(default=False)),
                ('processed_datetime', models.DateTimeField(blank=True, null=True)),
                ('packed', models.BooleanField(default=False)),
                ('packed_datetime', models.DateTimeField(blank=True, null=True)),
                ('shipped', models.BooleanField(default=False)),
                ('shipped_datetime', models.DateTimeField(blank=True, null=True)),
                ('requisition_datetime', models.DateTimeField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Requisition Date and Time')),
                ('reason_not_drawn', models.CharField(choices=[('not_collected', 'Not collected'), ('not_required', 'Not required at this visit'), ('measurement_skipped', 'Measurement skipped at this visit'), ('subject_refused', 'Subject refused'), ('equipment_malfunction', 'Equipment malfunction'), ('staff_unavailable', 'Staff unavailable'), ('no_further_information', 'No further information'), ('OTHER', 'Other, specify'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If not drawn, please explain')),
                ('drawn_datetime', models.DateTimeField(blank=True, help_text='If not drawn, leave blank.', null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date / Time Specimen Drawn')),
                ('study_site', models.CharField(choices=[('greater_francistown', 'Greater Francistown'), ('greater_gaborone', 'Greater Gaborone'), ('ngami', 'Ngami'), ('greater_selibe_phikwe', 'Greater Selibe Phikwe'), ('serowe_or_palapye', 'Serowe/Palapye')], max_length=25, verbose_name='Study site')),
                ('item_type', models.CharField(choices=[('N/A', 'Not applicable'), ('tube', 'Tube'), ('swab', 'Swab'), ('OTHER', 'Other')], default='N/A', max_length=25, verbose_name='Item collection type')),
                ('item_count', models.PositiveIntegerField(blank=True, help_text='Number of tubes, samples, etc being sent for this test/order only. Determines number of labels to print', null=True, verbose_name='Total number of items')),
                ('estimated_volume', models.DecimalField(blank=True, decimal_places=2, help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1', max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0, message='Cannot be a negative number')], verbose_name='Estimated volume in mL')),
                ('priority', models.CharField(choices=[('normal', 'Normal'), ('urgent', 'Urgent')], default='normal', max_length=25, verbose_name='Priority')),
                ('urgent_specify', models.TextField(blank=True, max_length=250, null=True, verbose_name='If urgent, please specify')),
                ('comments', models.TextField(blank=True, max_length=350, null=True)),
                ('panel', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='edc_lab.panel')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='traineeproject_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Subject Requisition',
                'verbose_name_plural': 'Subject Requisition',
                'unique_together': {('panel', 'subject_visit')},
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SubjectConsent',
            fields=[
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(editable=False, null=True)),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('updates_versions', models.BooleanField(default=False)),
                ('sid', models.CharField(blank=True, editable=False, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('screening_identifier', models.CharField(max_length=50, verbose_name='Screening identifier')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('consent_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of consent.', verbose_name='Consent date and time')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('language', models.CharField(blank=True, choices=[('setswana', 'Setswana'), ('english', 'English')], help_text='The language used for the consent process will also be used during data collection.', max_length=50, null=True, verbose_name='Language of consent')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant literate?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is illiterate.<br>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's last and first name")),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('OTHER', 'Other')], help_text='Participant Gender', max_length=6, null=True, verbose_name='Gender')),
                ('other_gender', models.CharField(max_length=100, null=True, verbose_name='If other specify...')),
                ('date_of_birth', models.DateField(null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.date_estimated.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('marital_status', models.CharField(choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], default='---------', max_length=8, verbose_name='What is your marital status?')),
                ('partner_count', models.PositiveIntegerField(verbose_name='Who do you currently live with?')),
                ('currently_living_with', models.CharField(choices=[('alone', 'Alone'), ('partner_or_spouse', 'Partner or spouse'), ('siblings', 'Siblings'), ('other', 'Other'), ('dont_want_to_answer', "Don't want to answer")], default='---------', max_length=20)),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Identity number')),
                ('identity_type', models.CharField(choices=[('country_id', 'Country ID number'), ('passport', 'Passport'), ('birth_certificate', 'Birth Certificate'), ('OTHER', 'Other')], default='---------', max_length=20, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number (Encryption: RSA local)', max_length=71, null=True)),
                ('consent_to_participate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', help_text='Participant is not eligible if no', max_length=3, validators=[edc_consent.validators.eligible_if_yes], verbose_name='Do you consent to participate in the study?')),
                ('consent_to_optional_sample_collection', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Do you consent to optional sample collection?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Subject Consent',
                'verbose_name_plural': 'Subject Consent',
                'ordering': ('-created',),
                'get_latest_by': 'consent_datetime',
                'abstract': False,
                'unique_together': {('subject_identifier', 'version'), ('first_name', 'date_of_birth', 'initials', 'version')},
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
    ]
